from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.db import models
from app.db.base import get_db
from app.schemas import ai as ai_schema
from app.schemas import playbook as playbook_schema
from app.services.ai_service import generate_playbook_from_prompt
from app.api.v1.deps import get_current_developer_user

router = APIRouter()

@router.post("/generate-playbook", response_model=ai_schema.AIChatResponse)
async def ai_generate_playbook(
    *,
    ai_request: ai_schema.AIChatRequest,
    current_user: models.User = Depends(get_current_developer_user)
):
    """
    (Dev+) AI 助理：接收自然語言，生成 Playbook 內容。
    
    這只會生成 YAML，並不會執行或儲存到 Playbook 管理中。
    """
    try:
        playbook_yaml = await generate_playbook_from_prompt(ai_request.prompt)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"AI service error: {e}")

    return ai_schema.AIChatResponse(
        prompt=ai_request.prompt,
        generated_playbook_content=playbook_yaml
    )

@router.post("/save-ai-playbook", response_model=playbook_schema.Playbook, status_code=status.HTTP_201_CREATED)
def save_ai_generated_playbook(
    *,
    db: Session = Depends(get_db),
    ai_response: ai_schema.AIChatResponse, # 前端將 AI 的回應傳回
    current_user: models.User = Depends(get_current_developer_user)
):
    """
    (Dev+) 將 AI 生成的 Playbook 儲存到 Playbook 管理中。
    
    前端在使用者確認 AI 的產出後，呼叫此 API。
    """
    db_playbook = models.Playbook(
        name=f"AI: {ai_response.prompt[:50]}...", # 自動產生一個名稱
        description=f"Generated by AI from prompt: {ai_response.prompt}",
        content=ai_response.generated_playbook_content,
        created_by=f"ai_assist (user:{current_user.email})"
    )
    db.add(db_playbook)
    db.commit()
    db.refresh(db_playbook)
    return db_playbook